#!/bin/bash

# Use Docker Hub as the default registry
HUB_ACCOUNT=yamaszone
IMAGE_NAME=phantomjs

help(){
	echo "Usage:"
	printf "\t cba | configure-bats-assert\t: Configure bats-assert library (first-time only).\n"
	printf "\t stf | setup-test-framework\t: Setup test framework (first-time only).\n"
	printf "\t build\t\t\t\t: Build image with the given tag (default=latest).\n"
	printf "\t tests\t\t\t\t: Run tests.\n"
	printf "\t help\t\t\t\t: Show this help.\n"
	exit 0
}

build_image(){
	IMAGE_TAG=$1
	if [[ -z $IMAGE_TAG ]]; then
		IMAGE_TAG=latest
	fi
	docker build -t $HUB_ACCOUNT/$IMAGE_NAME:$IMAGE_TAG .
}

configure_bats_assert(){
	# Configure bats-assert library if not configured already
	LIB_REPO=https://github.com/jasonkarns/bats-assert.git
	LIB_DIR=tests/helpers/assertions
	if [[ ! -d $LIB_DIR ]]; then
		git clone -b v1.1.1 $LIB_REPO $LIB_DIR
	fi
}

install_bats(){
	# Install BATS framework if not installed already
	type bats >/dev/null 2>&1
	if [[ "$?" -ne "0" ]]; then
		git clone -b v0.4.0 https://github.com/sstephenson/bats.git /tmp/bats
		OS_NAME=$(uname -a)
		echo $OS_NAME
		if [[ $OS_NAME == *"coreos"* ]]; then
			cd /tmp/bats && sudo ./install.sh /opt
		else
			cd /tmp/bats && sudo ./install.sh /usr/local
		fi
		cd -
		rm -rf /tmp/bats
	fi
}

if [[ -z $1 ]];then
	help
	exit 0
fi

case $1 in
	build)
		build_image $2
		;;
	cba | configure-bats-assert)
		configure_bats_assert
		;;
	stf | setup-test-framework)
		install_bats
		;;
	tests)
		install_bats
		configure_bats_assert
		bats tests/
		;;
	* | help)
		help
		;;
esac
